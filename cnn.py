# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HAZrk84RjcS4OZKAAvSPLZq1QLbnIS7C
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install kaggle
!mkdir -p ~/.kaggle
!cp /content/drive/MyDrive/Colab_Notebooks/kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d omkargurav/face-mask-dataset

"""untuk mengengekstrak file zip di Google Cola

"""

!unzip /content/face-mask-dataset.zip

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

# untuk menampilkan sebagian file dalam sebuah direktori yang berada pada sistem file
with_mask_files = os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])
print(with_mask_files[-5:])

without_mask_files = os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])
print(without_mask_files[-5:])

# untuk mencetak jumlah file dalam dua direktori yang berbeda

print('Number of with mask images:', len(with_mask_files))
print('Number of without mask images:', len(without_mask_files))

"""1 = untuk yang memakai masker

0 = untuk yang tidak memkai masker
"""

# create the labels
# untuk membuat daftar label yang digunakan dalam proses pembelajaran mesin atau analisis data, di mana setiap file dalam dua set data diberi label yang sesuai.

with_mask_labels = [1]*3725

without_mask_labels = [0]*3828

# melakukan dua operasi cetak (print) untuk menampilkan bagian awal dari dua daftar atau array

print(with_mask_labels[0:5])

print(without_mask_labels[0:5])

"""untuk mencetak panjang (jumlah elemen) dari dua daftar atau array"""

print(len(with_mask_labels))
print(len(without_mask_labels))

labels = with_mask_labels + without_mask_labels

print(len(labels))
print(labels[0:5])
print(labels[-5:])

"""**menampilkan gambar**"""

# menampilkan gambar yang menggunakan masker
img = mpimg.imread('/content/data/with_mask/with_mask_1455.jpg')
imgplot = plt.imshow(img)
plt.show()

# menampilkan gambar yang tidak menggunakan masker
img = mpimg.imread('/content/data/without_mask/without_mask_2355.jpg')
imgplot = plt.imshow(img)
plt.show()

"""memproses gambar dari dua direktori yang berbeda, satu untuk gambar dengan masker (with_mask_path) dan satu untuk gambar tanpa masker (without_mask_path)."""

# mengonversi gambar menjadi array numpy+

with_mask_path = '/content/data/with_mask/'

data = []

for img_file in with_mask_files:

  image = Image.open(with_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)



without_mask_path = '/content/data/without_mask/'


for img_file in without_mask_files:

  image = Image.open(without_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

len(data)

data[0]

type(data[0])

data[0].shape

# converting image list and label list to numpy arrays

X = np.array(data)
Y = np.array(labels)

type(X)
type(Y)

print(X.shape)
print(Y.shape)

print(Y)

"""Pemisahan data menjadi set pelatihan (train) dan set pengujian (test)"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

# scaling the data
# membantu dalam proses pelatihan model machine learning

X_train_scaled = X_train/255

X_test_scaled = X_test/255

X_train[0]

# menampilkan array numpy yang merupakan representasi dari gambar pertama setelah skala nilai pikselnya menjadi rentang antara 0 dan 1.

X_train_scaled[0]

"""**Building a Convolutional Neural Networks (CNN)**"""

import tensorflow as tf
from tensorflow import keras

"""**kerangka dasar dari sebuah model CNN**"""

num_of_classes = 2

model = keras.Sequential()

model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(128,128,3)))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))


model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dropout(0.5))


model.add(keras.layers.Dense(num_of_classes, activation='sigmoid'))

# compile the neural network
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['acc'])

# melatih model dengan menggunakan data yang sudah diproses
history = model.fit(X_train_scaled, Y_train, validation_split=0.1, epochs=5)

# untuk mengevaluasi performa model yang telah dilatih pada data pengujian
loss, accuracy = model.evaluate(X_test_scaled, Y_test)
print('Test Accuracy =', accuracy)

h = history

# plot the loss value
plt.plot(h.history['loss'], label='train loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()

# plot the accuracy value
plt.plot(h.history['acc'], label='train accuracy')
plt.plot(h.history['val_acc'], label='validation accuracy')
plt.legend()
plt.show()

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 0:

  print('The person in the image is not wearing a mask')

else:

  print('The person in the image is wearing a mask')

